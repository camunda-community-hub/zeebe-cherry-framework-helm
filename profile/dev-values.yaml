# Default values for zeebe-cherry-framework.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration for variables which can be accessed by all sub charts
global:
  # Annotations can be used to define common annotations, which should be applied to all deployments
  annotations: {}
  # Labels can be used to define common labels, which should be applied to all deployments
  labels:
    app: zeebe-cherry-framework

  # Image configuration to be used in each sub chart
  # image:
    # Image.tag defines the tag / version which should be used in the chart
    # Don't change the comment after the value, it's needed due to a bug yq. Check Makefile for more details.
    # tag: 8.1.2  # global.image.tag
    # Image.pullPolicy defines the image pull policy which should be used https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
    # pullPolicy: IfNotPresent
    # Image.pullSecrets can be used to configure image pull secrets https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    # pullSecrets: []

general:
  debug: false
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""

# Set deployment initContainers for any pre-startup proposes.
initContainers: []

# Deployment annotations
annotations: {}

image:
  repository: ghcr.io/camunda-community-hub/zeebe-cherry-framework
  tag: latest
  pullPolicy: IfNotPresent
  pullSecrets: []
  command: []
  args: []

# Extra environment variables to customize the deployment.
# For more details: https://github.com/camunda-community-hub/zeebe-cherry-framework
extraEnvs:
  - name: zeebe.client.broker.gatewayAddress
    value: "127.0.0.1:26500"
  - name: server.port
    value: "8080"


# Extra containers to have sidecars
extraContainers: []

# By default H2 database is used, which is handy for demos and tests,
# however, H2 is not supported in a clustered scenario.
# So for real-world workloads, an external database like PostgreSQL should be used.
# database:
#   driver: org.h2.Driver
#   url: jdbc:h2:./zeebe-cherry-framework-h2-dbs/process-engine
#   credentialsSecretEnabled: true
#   credentialsSecretName: ""
#   credentialsSecretKeys:
#     username: DB_USERNAME
#     password: DB_PASSWORD

service:
  enabled: true
  annotations: {}
  port: 8080
  portName: http
  protocol: TCP
  type: ClusterIP
  # NodePort example.
  # type: NodePort
  # nodePort: 30080
  # LoadBalancer example.
  # type: LoadBalancer
  # loadBalancerIP: 0.0.0.0

metrics:
  enabled: true
  service:
    port: 9404
    portName: metrics
    protocol: TCP
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: "/"
      prometheus.io/port: "9404"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# The StartupProbe works with Kubernetes >= 1.6
startupProbe:
  enabled: false
  config:
    httpGet:
      path: /cherry/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

readinessProbe:
  enabled: true
  config:
    httpGet:
      path: /cherry/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

# An arbitrary use of livenessProbe could make a lot of service interruption, use it wisely.
livenessProbe:
  enabled: false
  config:
    httpGet:
      path: /cherry/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: cherry.local
      paths:
        - /
  tls: []
  #  - secretName: zeebe-cherry-framework-tls
  #    hosts:
  #      - zeebe-cherry-framework.local

# Recreate the pods on any install, no matter if anything has changed.
# Which is useful to recreate the pod if the image tag has not changed.
recreatePods: false

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # If you do want to specify resources, uncomment the following lines,
  # adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

extraVolumeMounts: []
  # - name: dummy-volume
  #   mountPath: /dummy/volume

extraVolumes: []
  # - name: dummy-volume
  #   hostPath:
  #     path: /tmp/dummy-volume

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
